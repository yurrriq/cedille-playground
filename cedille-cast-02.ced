-- https://www.youtube.com/watch?v=pU5PnBPDb8U
module cedille-cast-02.

cNat ◂ ★ = ∀ X: ★. X ➔ (X ➔ X) ➔ X.
czero ◂ cNat
  = Λ X. λ base. λ step. base.
csucc ◂ cNat ➔ cNat
  = λ n. Λ X. λ base. λ step. step (n base step).

Bool ◂ ★ = ∀ X: ★. X ➔ X ➔ X.
true ◂ Bool = Λ X. λ then. λ else. then.
flse ◂ Bool = Λ X. λ then. λ else. else.

BoolιcNat ◂ ★ = ι _: Bool. cNat.

-- Projections are also erased.
true-czero ◂ BoolιcNat
  = [ true , czero ].

true2 ◂ Bool = true-czero.1.
zero2 ◂ cNat = true-czero.2.


iNat ◂ cNat ➔ ★
-- = λ n: cNat. ∀ P: cNat ➔ ★. P czero ➔ (Π m: cNat. P m ➔ (csucc m)) ➔ P n.
  = λ n: cNat. ∀ P: cNat ➔ ★. P czero ➔ (∀ m: cNat. P m ➔ P (csucc m)) ➔ P n.

izero ◂ iNat czero
  = Λ P. λ base. λ step. base.

-- isucc ◂ Π m: cNat. iNat m ➔ iNat (csucc m)
--   = Λ m. λ im. Λ P. λ base. λ step. step -m (im base step).
isucc ◂ ∀ m: cNat. iNat m ➔ iNat (csucc m)
  = Λ m. λ im. Λ P. λ base. λ step. step -m (im base step).

Nat ◂ ★ = ι x: cNat. iNat x.
zero ◂ Nat = [ czero , izero ].
succ ◂ Nat ➔ Nat
  = λ n. [ csucc n.1 , isucc -n.1 n.2 ].

-- indNat-fail1 ◂ ∀ P: Nat ➔ ★. P zero ➔ (∀ m: Nat. P m ➔ P (succ m)) ➔ Π n: Nat. P n
--   = Λ P. λ base. λ step. λ n. n.2 ·(λ x: cNat. P x) base step.

-- Iterate succ n times on z
cNat2Nat ◂ cNat ➔ Nat
  = λ n. n zero succ.

-- indNat-fail2 ◂ ∀ P: Nat ➔ ★. P zero ➔ (∀ m: Nat. P m ➔ P (succ m)) ➔ Π n: Nat. P n
--   = Λ P. λ base. λ step. λ n. n.2 ·(λ x: cNat. P (cNat2Nat x)) base step.

-- In Cedille, equality is just beta-eta-alpha equality of untyped lambda terms.

-- β is refl, the inhabitant of obviously true equalities.
exβ ◂ { λ x. x ≃ λ x. x } = β.

-- Don't need this. Can just use β.
-- lemmaβ ◂ { czero ≃ cNat2Nat czero } = β.

-- ρ    \R or \rho   rewriting
-- ρ+   performs β-reduction while looking for matches to rewrite
-- ς    is sym in Idris
-- refNat ◂ Π n: cNat. { n ≃ cNat2Nat n }
refNat ◂ Π n: Nat. { n ≃ cNat2Nat n.1 }
  = λ n. n.2 ·(λ x: cNat. {x ≃ cNat2Nat x})
      β (Λ m. λ eq. ρ+ ς eq - β).

indNat ◂ ∀ P: Nat ➔ ★. P zero ➔ (∀ m: Nat. P m ➔ P (succ m)) ➔ Π n: Nat. P n
  = Λ P. λ base. λ step. λ n.
      [ pf = n.2 ·(λ x: cNat. P (cNat2Nat x))
	       base (Λ m. λ pf'. step -(cNat2Nat m) pf') ]
      - ρ (refNat n) - pf.
